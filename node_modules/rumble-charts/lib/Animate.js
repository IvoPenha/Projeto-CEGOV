"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _omitBy2 = _interopRequireDefault(require("lodash/omitBy"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _assign2 = _interopRequireDefault(require("lodash/assign"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3Timer = require("d3-timer");

var _d3Interpolate = require("d3-interpolate");

var _eases = _interopRequireDefault(require("./helpers/eases"));

var _proxyChildren = _interopRequireDefault(require("./helpers/proxyChildren"));

var _normalizeSeries = _interopRequireDefault(require("./helpers/normalizeSeries"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Animates (actually interpolates) your `series` data. Very useful when you want to have a simple transitions
 * between data state.
 *
 * As a wrapper it takes `series` obtained from its parent and gives it to its children.
 *
 * @example ../docs/examples/Animate.md
 */
var Animate = /*#__PURE__*/function (_Component) {
  _inherits(Animate, _Component);

  var _super = _createSuper(Animate);

  function Animate(props) {
    var _this;

    _classCallCheck(this, Animate);

    _this = _super.call(this, props);
    _this.state = (0, _assign2["default"])({}, _this.props, (0, _normalizeSeries["default"])(_this.props));
    return _this;
  } // lifecycle


  _createClass(Animate, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var interpolate = (0, _d3Interpolate.interpolate)((0, _pick2["default"])(this.state, this.props.interpolateProps), (0, _pick2["default"])((0, _assign2["default"])({}, nextProps, (0, _normalizeSeries["default"])(nextProps)), this.props.interpolateProps));
      var _this$props = this.props,
          duration = _this$props.duration,
          onStart = _this$props.onStart,
          onEnd = _this$props.onEnd,
          logFPS = _this$props.logFPS;
      var ease = this.props.ease;
      ease = (0, _isString2["default"])(ease) ? _eases["default"][ease] : (0, _isFunction2["default"])(ease) ? ease : _eases["default"]['linear'];
      var i = 0;
      this._timer && this._timer.stop();
      onStart && onStart();

      var _timer = (0, _d3Timer.timer)(function (p) {
        i++;

        if (p >= duration) {
          p = duration;

          _this2.setState(interpolate(ease(p / duration)));

          onEnd && onEnd();

          if (logFPS) {
            console.warn(i * (1000 / duration) + 'fps; ' + i + ' frames in ' + duration + 'ms');
          }

          _timer.stop();
        } else {
          _this2.setState(interpolate(ease(p / duration)));
        }
      });

      this._timer = _timer;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._timer && this._timer.stop();
    } // render

  }, {
    key: "render",
    value: function render() {
      var props = this.props,
          state = this.state;
      return _react["default"].createElement(props.tag, {
        className: props.className
      }, (0, _proxyChildren["default"])(props.children, (0, _omitBy2["default"])(state, _isUndefined2["default"]), {
        layerWidth: state.layerWidth,
        layerHeight: state.layerHeight,
        scaleX: props.scaleX,
        scaleY: props.scaleY
      }));
    }
  }]);

  return Animate;
}(_react.Component);

exports["default"] = Animate;
Animate.displayName = 'Animate';
Animate.propTypes = {
  /**
   * Simple
   */
  series: _propTypes["default"].array,
  interpolateProps: _propTypes["default"].arrayOf(_propTypes["default"].string),
  proxyProps: _propTypes["default"].arrayOf(_propTypes["default"].string),
  duration: _propTypes["default"].number,
  logFPS: _propTypes["default"].bool,
  ease: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].oneOf(['linear', 'poly', 'quad', 'cubic', 'sin', 'exp', 'circle', 'bounce', 'elastic', 'back', 'linear-in', 'poly-in', 'quad-in', 'cubic-in', 'sin-in', 'exp-in', 'circle-in', 'bounce-in', 'elastic-in', 'back-in', 'linear-out', 'poly-out', 'quad-out', 'cubic-out', 'sin-out', 'exp-out', 'circle-out', 'bounce-out', 'elastic-out', 'back-out', 'linear-in-out', 'poly-in-out', 'quad-in-out', 'cubic-in-out', 'sin-in-out', 'exp-in-out', 'circle-in-out', 'bounce-in-out', 'elastic-in-out', 'back-in-out', 'linear-out-in', 'poly-out-in', 'quad-out-in', 'cubic-out-in', 'sin-out-in', 'exp-out-in', 'circle-out-in', 'bounce-out-in', 'elastic-out-in', 'back-out-in'])]),
  className: _propTypes["default"].string,
  scaleX: _propTypes["default"].object,
  scaleY: _propTypes["default"].object,
  children: _propTypes["default"].node,
  tag: _propTypes["default"].string,
  onStart: _propTypes["default"].func,
  onEnd: _propTypes["default"].func
};
Animate.defaultProps = {
  interpolateProps: ['series', 'maxX', 'maxY', 'minX', 'minY', 'layerWidth', 'layerHeight'],
  proxyProps: ['seriesNormalized'],
  duration: 500,
  ease: 'linear',
  tag: 'g'
};