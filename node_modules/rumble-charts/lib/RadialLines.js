"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3Scale = require("d3-scale");

var _d3Shape = require("d3-shape");

var _curves = _interopRequireDefault(require("./helpers/curves"));

var _normalizeNumber = _interopRequireDefault(require("./helpers/normalizeNumber"));

var _value = _interopRequireDefault(require("./helpers/value"));

var _colorFunc = _interopRequireDefault(require("./helpers/colorFunc"));

var _getCoords = _interopRequireDefault(require("./helpers/getCoords"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Renders radial lines for your radar chart
 *
 * @example ../docs/examples/RadialLines.md
 */
var RadialLines = /*#__PURE__*/function (_Component) {
  _inherits(RadialLines, _Component);

  var _super = _createSuper(RadialLines);

  function RadialLines(props) {
    var _this;

    _classCallCheck(this, RadialLines);

    _this = _super.call(this, props);
    _this.getInnerRadius = _this.getInnerRadius.bind(_assertThisInitialized(_this));
    return _this;
  } // helpers


  _createClass(RadialLines, [{
    key: "getOuterRadius",
    value: function getOuterRadius(props) {
      return Math.min(props.layerWidth, props.layerHeight) / 2;
    }
  }, {
    key: "getInnerRadius",
    value: function getInnerRadius(props) {
      return (0, _normalizeNumber["default"])(props.innerRadius, this.getOuterRadius(props));
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var className = props.className,
          style = props.style,
          asAreas = props.asAreas,
          colors = props.colors,
          minX = props.minX,
          maxX = props.maxX,
          minY = props.minY,
          maxY = props.maxY,
          position = props.position,
          layerWidth = props.layerWidth,
          layerHeight = props.layerHeight,
          opacity = props.opacity;
      var innerRadius = this.getInnerRadius(props);
      var outerRadius = this.getOuterRadius(props);
      var radialScale = (0, _d3Scale.scaleLinear)().range([innerRadius, outerRadius]).domain(props.scaleY.direction >= 0 ? [minY, maxY] : [maxY, minY]);
      var circularScale = (0, _d3Scale.scaleLinear)().range([props.startAngle, props.endAngle]).domain(props.scaleX.direction >= 0 ? [minX - 0.5, maxX + 0.5] : [maxX + 0.5, minX - 0.5]);
      var series = props.series;

      var _radius0 = radialScale(0);

      var coords = (0, _getCoords["default"])(position || '', layerWidth, layerHeight, outerRadius * 2, outerRadius * 2);
      var color = (0, _colorFunc["default"])(colors);
      return _react["default"].createElement("g", {
        className: className,
        style: style,
        transform: 'translate(' + (coords.x + outerRadius) + ' ' + (coords.y + outerRadius) + ')',
        opacity: opacity
      }, (0, _map2["default"])(series, function (series, index) {
        var seriesVisible = props.seriesVisible,
            seriesAttributes = props.seriesAttributes,
            seriesStyle = props.seriesStyle;
        var lineVisible = props.lineVisible,
            lineStyle = props.lineStyle,
            lineAttributes = props.lineAttributes,
            lineWidth = props.lineWidth;
        seriesVisible = (0, _value["default"])(seriesVisible, {
          seriesIndex: index,
          series: series,
          props: props
        });

        if (!seriesVisible) {
          return;
        }

        seriesAttributes = (0, _value["default"])(seriesAttributes, {
          seriesIndex: index,
          series: series,
          props: props
        });
        seriesStyle = (0, _value["default"])(seriesStyle, {
          seriesIndex: index,
          series: series,
          props: props
        });
        var linePath;
        lineVisible = (0, _value["default"])(lineVisible, {
          seriesIndex: index,
          series: series,
          props: props
        });

        if (lineVisible) {
          var line = asAreas ? (0, _d3Shape.areaRadial)().innerRadius(function (point) {
            return point.y0 ? radialScale(point.y0) : _radius0;
          }).outerRadius(function (point) {
            return radialScale(point.y);
          }) : (0, _d3Shape.lineRadial)().radius(function (point) {
            return radialScale(point.y);
          });
          var lineColor = series.color || color(index);
          var curve = (0, _isString2["default"])(props.interpolation) ? _curves["default"][props.interpolation] : props.interpolation;
          line.angle(function (point) {
            return circularScale(point.x);
          }).defined(function (point) {
            return (0, _isNumber2["default"])(point.y);
          }).curve(curve);
          lineAttributes = (0, _value["default"])(lineAttributes, {
            seriesIndex: index,
            series: series,
            props: props
          });
          lineStyle = (0, _value["default"])([series.style, lineStyle], {
            seriesIndex: index,
            series: series,
            props: props
          });
          lineWidth = (0, _value["default"])(lineWidth, {
            seriesIndex: index,
            series: series,
            props: props
          });
          linePath = _react["default"].createElement("path", _extends({
            style: lineStyle,
            fill: asAreas ? lineColor : 'transparent',
            stroke: asAreas ? 'transparent' : lineColor,
            strokeWidth: lineWidth,
            d: line(series.data)
          }, lineAttributes));
        }

        return _react["default"].createElement("g", _extends({
          key: index,
          className: className && className + '-series ' + className + '-series-' + index,
          style: seriesStyle,
          opacity: series.opacity
        }, seriesAttributes), linePath);
      }));
    }
  }]);

  return RadialLines;
}(_react.Component);

exports["default"] = RadialLines;
RadialLines.displayName = 'RadialLines';
RadialLines.propTypes = {
  className: _propTypes["default"].string,
  style: _propTypes["default"].object,
  scaleX: _propTypes["default"].object,
  scaleY: _propTypes["default"].object,
  minX: _propTypes["default"].number,
  maxX: _propTypes["default"].number,
  minY: _propTypes["default"].number,
  maxY: _propTypes["default"].number,
  layerWidth: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  layerHeight: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  seriesIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].array, _propTypes["default"].func]),
  series: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    name: _propTypes["default"].string,
    color: _propTypes["default"].string,
    opacity: _propTypes["default"].number,
    style: _propTypes["default"].object,
    data: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].arrayOf(_propTypes["default"].number), _propTypes["default"].shape({
      x: _propTypes["default"].number,
      y: _propTypes["default"].number
    })]))
  })),
  colors: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['category10', 'category20', 'category20b', 'category20c', 'accent', 'dark2', 'paired', 'pastel1', 'pastel2', 'set1', 'set2', 'set3', 'tableau10']), _propTypes["default"].arrayOf(_propTypes["default"].string), _propTypes["default"].func]),
  position: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].string]),
  opacity: _propTypes["default"].number,
  asAreas: _propTypes["default"].bool,
  innerRadius: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  startAngle: _propTypes["default"].number,
  endAngle: _propTypes["default"].number,
  interpolation: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'monotone']), _propTypes["default"].func]),
  seriesVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  seriesAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  seriesStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  lineVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  lineAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  lineStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  lineWidth: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].func])
};
RadialLines.defaultProps = {
  colors: 'category20',
  seriesVisible: true,
  lineVisible: true,
  lineWidth: 3,
  startAngle: 0,
  endAngle: 2 * Math.PI,
  innerRadius: 0,
  position: 'center middle',
  interpolation: 'cardinal-closed'
};