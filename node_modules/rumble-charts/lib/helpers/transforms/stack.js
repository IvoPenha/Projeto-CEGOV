"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = stack;

var _max2 = _interopRequireDefault(require("lodash/max"));

var _min2 = _interopRequireDefault(require("lodash/min"));

var _defaults2 = _interopRequireDefault(require("lodash/defaults"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _map2 = _interopRequireDefault(require("lodash/map"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function stack(props, options) {
  var _ref = options || {},
      normalize = _ref.normalize;

  var series = props.series,
      seriesNormalized = props.seriesNormalized,
      maxX = props.maxX,
      maxY = props.maxY,
      minX = props.minX,
      minY = props.minY;
  var stackedY = [],
      lowestY = [];
  series = (0, _map2["default"])(series, function (series) {
    var newSeries = {
      data: (0, _map2["default"])(series.data, function (point, pointIndex) {
        stackedY[pointIndex] = stackedY[pointIndex] || 0;

        if ((0, _isUndefined2["default"])(lowestY[pointIndex])) {
          lowestY[pointIndex] = stackedY[pointIndex];
        }

        var newPoint = {
          y0: stackedY[pointIndex],
          y: stackedY[pointIndex] + point.y
        };
        stackedY[pointIndex] = newPoint.y;
        return (0, _defaults2["default"])(newPoint, point);
      })
    };
    return (0, _defaults2["default"])(newSeries, series);
  });
  minY = (0, _min2["default"])(lowestY);
  var stackedMaxY = (0, _max2["default"])(stackedY);
  maxY = Math.max(stackedMaxY, maxY);

  if (normalize) {
    var ratios = (0, _map2["default"])(stackedY, function (y) {
      return stackedMaxY / y;
    });
    series = (0, _map2["default"])(series, function (series) {
      var newSeries = {
        data: (0, _map2["default"])(series.data, function (point, pointIndex) {
          var newPoint = {
            y0: point.y0 * ratios[pointIndex],
            y: point.y * ratios[pointIndex]
          };
          return (0, _defaults2["default"])(newPoint, point);
        })
      };
      return (0, _defaults2["default"])(newSeries, series);
    });
  }

  return {
    series: series,
    seriesNormalized: seriesNormalized,
    maxX: maxX,
    maxY: maxY,
    minX: minX,
    minY: minY
  };
}