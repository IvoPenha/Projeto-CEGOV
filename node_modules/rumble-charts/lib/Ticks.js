"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _range2 = _interopRequireDefault(require("lodash/range"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _normalizeNumber = _interopRequireDefault(require("./helpers/normalizeNumber"));

var _value = _interopRequireDefault(require("./helpers/value"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Renders ticks (labels and lines) for axis (x and y).
 *
 * @example ../docs/examples/Ticks.md
 */
var Ticks = /*#__PURE__*/function (_Component) {
  _inherits(Ticks, _Component);

  var _super = _createSuper(Ticks);

  function Ticks(props) {
    var _this;

    _classCallCheck(this, Ticks);

    _this = _super.call(this, props);
    _this.generateTicks = _this.generateTicks.bind(_assertThisInitialized(_this));
    _this.renderTick = _this.renderTick.bind(_assertThisInitialized(_this));
    _this.renderLabel = _this.renderLabel.bind(_assertThisInitialized(_this));
    _this.renderLine = _this.renderLine.bind(_assertThisInitialized(_this));
    return _this;
  } // helpers


  _createClass(Ticks, [{
    key: "generateTicks",
    value: function generateTicks(config) {
      var props = this.props;
      var axis = props.axis,
          maxX = props.maxX,
          maxY = props.maxY,
          minX = props.minX,
          minY = props.minY;
      var maxTicks = config.maxTicks,
          minDistance = config.minDistance,
          distance = config.distance;
      var max = axis === 'y' ? maxY : maxX;
      var min = axis === 'y' ? minY : minX;
      var length = max - min;

      if ((0, _isUndefined2["default"])(minDistance)) {
        minDistance = Math.min(1, length);
      }

      if ((0, _isUndefined2["default"])(maxTicks)) {
        maxTicks = Math.min((length + minDistance) / minDistance, 5);
      }

      if ((0, _isUndefined2["default"])(distance)) {
        distance = Math.max(minDistance, length / maxTicks);
        distance = Math.ceil(distance / minDistance) * minDistance;
      }

      return (0, _range2["default"])(min, max + minDistance, distance);
    } // render

  }, {
    key: "renderTick",
    value: function renderTick(ticksLength, tick, index) {
      var props = this.props,
          x = this.x,
          y = this.y,
          position = this.position;
      var axis = props.axis,
          className = props.className,
          layerWidth = props.layerWidth,
          layerHeight = props.layerHeight,
          scaleX = props.scaleX,
          scaleY = props.scaleY;
      var tickStyle = props.tickStyle,
          tickAttributes = props.tickAttributes,
          tickVisible = props.tickVisible;

      if ((0, _isNumber2["default"])(tick)) {
        tick = _defineProperty({}, axis, tick);
      }

      tickVisible = (0, _value["default"])(tickVisible, {
        index: index,
        ticksLength: ticksLength,
        tick: tick,
        props: props
      });

      if (!tickVisible) {
        return;
      }

      tickAttributes = (0, _value["default"])(tickAttributes, {
        index: index,
        ticksLength: ticksLength,
        tick: tick,
        props: props
      });
      tickStyle = (0, _value["default"])(tickStyle, {
        index: index,
        ticksLength: ticksLength,
        tick: tick,
        props: props
      });
      var pX = axis === 'x' ? x(tick.x) : (0, _normalizeNumber["default"])(position, layerWidth);
      var pY = axis === 'y' ? y(tick.y) : (0, _normalizeNumber["default"])(position, layerHeight);
      var transform = scaleX.swap || scaleY.swap ? 'translate(' + pY + ' ' + pX + ')' : 'translate(' + pX + ' ' + pY + ')';
      return _react["default"].createElement("g", _extends({
        key: index,
        style: tickStyle,
        transform: transform,
        className: className && className + '-tick ' + className + '-tick-' + index
      }, tickAttributes), this.renderLabel(ticksLength, tick, index), this.renderLine(ticksLength, tick, index));
    }
  }, {
    key: "renderLabel",
    value: function renderLabel(ticksLength, tick, index) {
      var props = this.props;
      var className = props.className,
          axis = props.axis;
      var labelStyle = props.labelStyle,
          labelFormat = props.labelFormat,
          labelVisible = props.labelVisible,
          labelAttributes = props.labelAttributes,
          label = props.label;
      labelVisible = (0, _value["default"])(labelVisible, {
        index: index,
        ticksLength: ticksLength,
        tick: tick,
        props: props
      });

      if (labelVisible) {
        labelAttributes = (0, _value["default"])([tick.labelAttributes, labelAttributes], {
          index: index,
          ticksLength: ticksLength,
          tick: tick,
          props: props
        });
        labelStyle = (0, _value["default"])([tick.labelStyle, labelStyle], {
          index: index,
          ticksLength: ticksLength,
          tick: tick,
          props: props
        });
        label = (0, _value["default"])([tick.label, label, tick[axis]], {
          index: index,
          ticksLength: ticksLength,
          tick: tick,
          props: props
        });

        if ((0, _isString2["default"])(label) || (0, _isNumber2["default"])(label)) {
          return _react["default"].createElement("text", _extends({
            style: labelStyle,
            className: className && className + '-label ' + className + '-label-' + index
          }, labelAttributes), (0, _value["default"])(labelFormat, label + '') || label);
        } else {
          return label;
        }
      }
    }
  }, {
    key: "renderLine",
    value: function renderLine(ticksLength, tick, index) {
      var props = this.props,
          horizontal = this.horizontal;
      var layerWidth = props.layerWidth,
          layerHeight = props.layerHeight,
          className = props.className;
      var lineVisible = props.lineVisible,
          lineAttributes = props.lineAttributes,
          lineStyle = props.lineStyle,
          lineLength = props.lineLength,
          lineOffset = props.lineOffset;
      lineVisible = (0, _value["default"])(lineVisible, {
        index: index,
        ticksLength: ticksLength,
        tick: tick,
        props: props
      });

      if (!lineVisible) {
        return null;
      }

      lineAttributes = (0, _value["default"])([tick.lineAttributes, lineAttributes], {
        index: index,
        ticksLength: ticksLength,
        tick: tick,
        props: props
      });
      lineStyle = (0, _value["default"])([tick.lineStyle, lineStyle], {
        index: index,
        ticksLength: ticksLength,
        tick: tick,
        props: props
      });
      lineLength = (0, _normalizeNumber["default"])((0, _value["default"])([tick.lineLength, lineLength], {
        index: index,
        ticksLength: ticksLength,
        tick: tick,
        props: props
      }), horizontal ? layerWidth : layerHeight);
      lineOffset = (0, _normalizeNumber["default"])((0, _value["default"])([tick.lineOffset, lineOffset], {
        index: index,
        ticksLength: ticksLength,
        tick: tick,
        props: props
      }), horizontal ? layerWidth : layerHeight);
      var d = horizontal ? 'M' + lineOffset + ',0 h' + lineLength : 'M0,' + lineOffset + ' v' + lineLength;
      return _react["default"].createElement("path", _extends({
        style: lineStyle,
        className: className && className + '-line ' + className + '-line-' + index,
        d: d
      }, lineAttributes));
    }
  }, {
    key: "render",
    value: function render() {
      var props = this.props;
      var className = props.className,
          position = props.position,
          scaleX = props.scaleX,
          scaleY = props.scaleY,
          axis = props.axis,
          style = props.style;
      var ticks = props.ticks;
      this.x = scaleX.factory(props);
      this.y = scaleY.factory(props);
      this.horizontal = axis === 'y' && !scaleX.swap && !scaleY.swap || axis === 'x' && (scaleX.swap || scaleY.swap);
      this.position = position || (axis === 'x' ? scaleX.swap || scaleY.swap ? 'top' : 'bottom' : 'left');
      ticks = (0, _value["default"])([ticks], props);

      if ((0, _isNumber2["default"])(ticks)) {
        ticks = {
          maxTicks: ticks
        };
      }

      ticks = ticks || {};

      if ((0, _isPlainObject2["default"])(ticks)) {
        ticks = this.generateTicks(ticks);
      }

      return _react["default"].createElement("g", {
        className: className,
        style: style,
        opacity: props.opacity
      }, (0, _map2["default"])(ticks, this.renderTick.bind(this, ticks.length)));
    }
  }]);

  return Ticks;
}(_react.Component);

exports["default"] = Ticks;
Ticks.displayName = 'Ticks';
Ticks.propTypes = {
  style: _propTypes["default"].object,
  opacity: _propTypes["default"].number,
  className: _propTypes["default"].string,
  axis: _propTypes["default"].string,
  position: _propTypes["default"].string,
  tickVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  tickAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  tickStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node, _propTypes["default"].func]),
  labelVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  labelAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  labelStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  labelFormat: _propTypes["default"].func,
  lineVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  lineAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  lineStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  lineLength: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].func]),
  lineOffset: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].func]),
  ticks: _propTypes["default"].oneOfType([// ticks factory
  _propTypes["default"].func, // how many ticks to show
  _propTypes["default"].number, // settings
  _propTypes["default"].shape({
    maxTicks: _propTypes["default"].number,
    minDistance: _propTypes["default"].number,
    distance: _propTypes["default"].number
  }), // ticks themselves
  _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].shape({
    x: _propTypes["default"].number,
    y: _propTypes["default"].number,
    label: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].string, _propTypes["default"].node]),
    labelStyle: _propTypes["default"].object,
    labelAttributes: _propTypes["default"].object,
    lineStyle: _propTypes["default"].object,
    lineAttributes: _propTypes["default"].object,
    lineLength: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
    lineOffset: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
  })]))]),
  scaleX: _propTypes["default"].object,
  scaleY: _propTypes["default"].object,
  layerWidth: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  layerHeight: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  minX: _propTypes["default"].number,
  maxX: _propTypes["default"].number,
  minY: _propTypes["default"].number,
  maxY: _propTypes["default"].number
};
Ticks.defaultProps = {
  axis: 'x',
  tickVisible: true,
  labelVisible: true,
  lineVisible: true,
  lineLength: 5,
  lineOffset: 0
};