"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _keys2 = _interopRequireDefault(require("lodash/keys"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3Shape = require("d3-shape");

var _value = _interopRequireDefault(require("./helpers/value"));

var _colorFunc = _interopRequireDefault(require("./helpers/colorFunc"));

var _propTypes2 = _interopRequireDefault(require("./helpers/propTypes"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var symbolsMap = {
  'circle': _d3Shape.symbolCircle,
  'cross': _d3Shape.symbolCross,
  'diamond': _d3Shape.symbolDiamond,
  'square': _d3Shape.symbolSquare,
  'triangle-down': _d3Shape.symbolWye,
  'triangle-up': _d3Shape.symbolTriangle,
  'star': _d3Shape.symbolStar
};
var methods = {
  dots: 'renderCircle',
  dot: 'renderCircle',
  circles: 'renderCircle',
  circle: 'renderCircle',
  ellipses: 'renderEllipse',
  ellipse: 'renderEllipse',
  symbols: 'renderSymbol',
  symbol: 'renderSymbol',
  labels: 'renderLabel',
  label: 'renderLabel',
  path: 'renderPath'
};
/**
 * Renders dots for your scatter plot.
 *
 * @example ../docs/examples/Dots.md
 */

var Dots = /*#__PURE__*/function (_Component) {
  _inherits(Dots, _Component);

  var _super = _createSuper(Dots);

  function Dots(props) {
    var _this;

    _classCallCheck(this, Dots);

    _this = _super.call(this, props);
    _this.renderDot = _this.renderDot.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Dots, [{
    key: "renderCircle",
    value: function renderCircle(_ref) {
      var key = _ref.key,
          seriesIndex = _ref.seriesIndex,
          pointIndex = _ref.pointIndex,
          point = _ref.point,
          dotStyle = _ref.dotStyle,
          dotAttributes = _ref.dotAttributes,
          props = _ref.props,
          color = _ref.color;
      var className = props.className;
      var circleRadius = props.circleRadius,
          circleAttributes = props.circleAttributes;
      var series = props.series[seriesIndex];
      circleRadius = (0, _value["default"])(circleRadius, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      circleAttributes = (0, _value["default"])(circleAttributes, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      return _react["default"].createElement("circle", _extends({
        key: key,
        className: className && className + '-circle ' + className + '-circle-' + seriesIndex + '-' + pointIndex,
        cx: 0,
        cy: 0,
        r: circleRadius,
        style: dotStyle,
        fill: point.color || series.color || color(seriesIndex),
        fillOpacity: point.opacity
      }, dotAttributes, circleAttributes));
    }
  }, {
    key: "renderEllipse",
    value: function renderEllipse(_ref2) {
      var key = _ref2.key,
          seriesIndex = _ref2.seriesIndex,
          pointIndex = _ref2.pointIndex,
          point = _ref2.point,
          dotStyle = _ref2.dotStyle,
          dotAttributes = _ref2.dotAttributes,
          props = _ref2.props,
          color = _ref2.color;
      var className = props.className;
      var ellipseRadiusX = props.ellipseRadiusX,
          ellipseRadiusY = props.ellipseRadiusY,
          ellipseAttributes = props.ellipseAttributes;
      var series = props.series[seriesIndex];
      ellipseRadiusX = (0, _value["default"])(ellipseRadiusX, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      ellipseRadiusY = (0, _value["default"])(ellipseRadiusY, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      ellipseAttributes = (0, _value["default"])(ellipseAttributes, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      return _react["default"].createElement("ellipse", _extends({
        key: key,
        className: className && className + '-ellipse ' + className + '-ellipse-' + seriesIndex + '-' + pointIndex,
        cx: 0,
        cy: 0,
        rx: ellipseRadiusX,
        ry: ellipseRadiusY,
        style: dotStyle,
        fill: point.color || series.color || color(seriesIndex),
        fillOpacity: point.opacity
      }, dotAttributes, ellipseAttributes));
    }
  }, {
    key: "renderPath",
    value: function renderPath(_ref3) {
      var key = _ref3.key,
          seriesIndex = _ref3.seriesIndex,
          pointIndex = _ref3.pointIndex,
          point = _ref3.point,
          dotStyle = _ref3.dotStyle,
          dotAttributes = _ref3.dotAttributes,
          props = _ref3.props,
          color = _ref3.color;
      var className = props.className;
      var path = props.path,
          pathAttributes = props.pathAttributes;
      var series = props.series[seriesIndex];
      path = (0, _value["default"])(path, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      pathAttributes = (0, _value["default"])(pathAttributes, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      return _react["default"].createElement("path", _extends({
        key: key,
        className: className && className + '-path ' + className + '-path-' + seriesIndex + '-' + pointIndex,
        d: path,
        style: dotStyle,
        fill: point.color || series.color || color(seriesIndex),
        fillOpacity: point.opacity
      }, dotAttributes, pathAttributes));
    }
  }, {
    key: "renderSymbol",
    value: function renderSymbol(_ref4) {
      var key = _ref4.key,
          seriesIndex = _ref4.seriesIndex,
          pointIndex = _ref4.pointIndex,
          point = _ref4.point,
          dotStyle = _ref4.dotStyle,
          dotAttributes = _ref4.dotAttributes,
          props = _ref4.props,
          color = _ref4.color;
      var className = props.className;
      var symbolType = props.symbolType,
          symbolAttributes = props.symbolAttributes;
      var series = props.series[seriesIndex];
      symbolType = (0, _value["default"])(symbolType, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      symbolAttributes = (0, _value["default"])(symbolAttributes, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      var type = (0, _isString2["default"])(symbolType) ? symbolsMap[symbolType] : symbolType;
      return _react["default"].createElement("path", _extends({
        key: key,
        className: className && className + '-symbol ' + className + '-symbol-' + seriesIndex + '-' + pointIndex,
        d: (0, _d3Shape.symbol)().type(type)(point, pointIndex),
        style: dotStyle,
        fill: point.color || series.color || color(seriesIndex),
        fillOpacity: point.opacity
      }, dotAttributes, symbolAttributes));
    }
  }, {
    key: "renderLabel",
    value: function renderLabel(_ref5) {
      var key = _ref5.key,
          seriesIndex = _ref5.seriesIndex,
          pointIndex = _ref5.pointIndex,
          point = _ref5.point,
          dotStyle = _ref5.dotStyle,
          dotAttributes = _ref5.dotAttributes,
          props = _ref5.props,
          color = _ref5.color;
      var className = props.className;
      var label = props.label,
          labelAttributes = props.labelAttributes;
      var series = props.series[seriesIndex];
      label = (0, _value["default"])(label, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      labelAttributes = (0, _value["default"])(labelAttributes, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      return _react["default"].createElement("text", _extends({
        key: key,
        className: className && className + '-label ' + className + '-label-' + seriesIndex + '-' + pointIndex,
        style: dotStyle,
        fill: point.color || series.color || color(seriesIndex),
        fillOpacity: point.opacity
      }, dotAttributes, labelAttributes), label);
    }
  }, {
    key: "renderDot",
    value: function renderDot(x, y, seriesIndex, pointIndex, point) {
      var _this2 = this;

      var props = this.props;
      var className = props.className;
      var groupStyle = props.groupStyle,
          dotVisible = props.dotVisible,
          dotAttributes = props.dotAttributes,
          dotStyle = props.dotStyle,
          dotType = props.dotType,
          dotRender = props.dotRender;
      var series = props.series[seriesIndex];
      dotVisible = (0, _value["default"])(dotVisible, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });

      if (!dotVisible) {
        return;
      }

      groupStyle = (0, _value["default"])(groupStyle, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      dotType = (0, _value["default"])([dotType], {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        series: series,
        props: props
      });
      dotAttributes = (0, _value["default"])(dotAttributes, {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        dotType: dotType,
        series: series,
        props: props
      });
      dotStyle = (0, _value["default"])([point.style, series.style, dotStyle], {
        seriesIndex: seriesIndex,
        pointIndex: pointIndex,
        point: point,
        dotType: dotType,
        series: series,
        props: props
      });
      var color = this.color;
      var dot;

      if ((0, _isFunction2["default"])(dotRender)) {
        dot = dotRender({
          seriesIndex: seriesIndex,
          pointIndex: pointIndex,
          point: point,
          dotStyle: dotStyle,
          dotAttributes: dotAttributes,
          props: props,
          color: color
        });
      } else {
        if ((0, _isString2["default"])(dotType)) {
          dot = this[methods[dotType]] && this[methods[dotType]]({
            seriesIndex: seriesIndex,
            pointIndex: pointIndex,
            point: point,
            dotStyle: dotStyle,
            dotAttributes: dotAttributes,
            props: props,
            color: color
          });
        } else if ((0, _isArray2["default"])(dotType)) {
          dot = (0, _map2["default"])(dotType, function (dotType, key) {
            return _this2[methods[dotType]]({
              key: key,
              seriesIndex: seriesIndex,
              pointIndex: pointIndex,
              point: point,
              dotStyle: dotStyle,
              dotAttributes: dotAttributes,
              props: props,
              color: color
            });
          });
        } else {
          dot = null;
        }
      }

      return _react["default"].createElement("g", {
        key: pointIndex,
        className: className && className + '-dot ' + className + '-dot-' + pointIndex,
        transform: 'translate(' + x + ' ' + y + ')',
        style: groupStyle
      }, dot);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var props = this.props;
      var className = props.className,
          style = props.style,
          scaleX = props.scaleX,
          scaleY = props.scaleY,
          colors = props.colors,
          opacity = props.opacity;
      var x = scaleX.factory(props);
      var y = scaleY.factory(props);
      var rotate = scaleX.swap || scaleY.swap;
      this.color = (0, _colorFunc["default"])(colors);
      return _react["default"].createElement("g", {
        className: className,
        style: style,
        opacity: opacity
      }, (0, _map2["default"])(props.series, function (series, index) {
        var seriesVisible = props.seriesVisible,
            seriesStyle = props.seriesStyle,
            seriesAttributes = props.seriesAttributes;
        seriesVisible = (0, _value["default"])(seriesVisible, {
          seriesIndex: index,
          series: series,
          props: props
        });

        if (!seriesVisible) {
          return;
        }

        seriesAttributes = (0, _value["default"])(seriesAttributes, {
          seriesIndex: index,
          series: series,
          props: props
        });
        seriesStyle = (0, _value["default"])(seriesStyle, {
          seriesIndex: index,
          series: series,
          props: props
        });
        return _react["default"].createElement("g", _extends({
          key: index,
          className: className && className + '-series ' + className + '-series-' + index,
          style: seriesStyle,
          opacity: series.opacity
        }, seriesAttributes), (0, _map2["default"])(series.data, function (point, pointIndex) {
          var y1 = y(point.y);
          var x1 = x(point.x);

          if (rotate) {
            return _this3.renderDot(y1, x1, index, pointIndex, point);
          } else {
            return _this3.renderDot(x1, y1, index, pointIndex, point);
          }
        }));
      }));
    }
  }]);

  return Dots;
}(_react.Component);

exports["default"] = Dots;
Dots.displayName = 'Dots';
Dots.propTypes = {
  className: _propTypes["default"].string,
  colors: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['category10', 'category20', 'category20b', 'category20c', 'accent', 'dark2', 'paired', 'pastel1', 'pastel2', 'set1', 'set2', 'set3', 'tableau10']), _propTypes["default"].arrayOf(_propTypes["default"].string), _propTypes["default"].func]),
  opacity: _propTypes["default"].number,
  style: _propTypes["default"].object,

  /**
   * Possible values: `"dot"`, `"circle"`, `"ellipse"`, `"symbol"`, `"label"`, `"path"`.
   */
  dotType: _propTypes["default"].oneOfType([_propTypes["default"].oneOf((0, _keys2["default"])(methods)), _propTypes["default"].array, _propTypes["default"].func]),
  dotRender: _propTypes["default"].func,
  circleRadius: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].func]),
  circleAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  ellipseRadiusX: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].func]),
  ellipseRadiusY: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].func]),
  ellipseAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),

  /**
   * Possible values: `"circle"`, `"cross"`, `"diamond"`, `"square"`,
   * `"triangle-down"`, `"triangle-up"`
   */
  symbolType: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func, _propTypes["default"].object]),
  symbolAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),
  labelAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  path: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),
  pathAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  seriesVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  seriesAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  seriesStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  groupStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  dotVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  dotAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  dotStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  seriesIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].array, _propTypes["default"].func]),
  series: _propTypes2["default"].series,
  scaleX: _propTypes["default"].object,
  scaleY: _propTypes["default"].object
};
Dots.defaultProps = {
  colors: 'category20',
  dotType: 'circles',
  circleRadius: 4,
  ellipseRadiusX: 6,
  ellipseRadiusY: 4,
  seriesVisible: true,
  dotVisible: true
};