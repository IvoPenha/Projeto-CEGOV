"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _forEach2 = _interopRequireDefault(require("lodash/forEach"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _proxyChildren = _interopRequireDefault(require("./helpers/proxyChildren"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Helps to use mouse events. For now supports only "`onClick`", "`onMouseMove`" and "`onMouseLeave`".
 *
 * This component will be improved and simplified in the future.
 *
 * @example ../docs/examples/Handlers.md
 */
var Handlers = /*#__PURE__*/function (_Component) {
  _inherits(Handlers, _Component);

  var _super = _createSuper(Handlers);

  function Handlers(props) {
    var _this;

    _classCallCheck(this, Handlers);

    _this = _super.call(this, props);
    _this.updatePoint0 = _this.updatePoint0.bind(_assertThisInitialized(_this));
    _this.updateScales = _this.updateScales.bind(_assertThisInitialized(_this));
    _this.handleMouseEvent = _this.handleMouseEvent.bind(_assertThisInitialized(_this));
    _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_this));
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    return _this;
  } // helpers


  _createClass(Handlers, [{
    key: "updatePoint0",
    value: function updatePoint0() {
      var rect = this.rect.getBoundingClientRect();
      this.left = rect.left;
      this.top = rect.top;
      this.width = rect.width;
      this.height = rect.height;
    }
  }, {
    key: "updateScales",
    value: function updateScales() {
      var props = this.props;
      var scaleX = props.scaleX,
          scaleY = props.scaleY;
      this.x = scaleX.factory(props);
      this.y = scaleY.factory(props);
      this.scaleX = scaleX.factory(props);
      this.scaleY = scaleY.factory(props);
      var xDomain = this.x.domain();
      var xRange = this.x.range();
      this.x.domain(xRange);
      this.x.range(xDomain);
      var yDomain = this.y.domain();
      var yRange = this.y.range();
      this.y.domain(yRange);
      this.y.range(yDomain);
      this.ratio = Math.abs((this.y(1) - this.y(0)) / (this.x(1) - this.x(0)));
    } // handlers

  }, {
    key: "handleMouseEvent",
    value: function handleMouseEvent(event, handler) {
      var _this2 = this;

      this.updatePoint0();
      var clientX = event.clientX,
          clientY = event.clientY;
      var left = this.left,
          top = this.top,
          props = this.props;
      var series = props.series,
          sensitivity = props.sensitivity,
          optimized = props.optimized,
          layerWidth = props.layerWidth,
          layerHeight = props.layerHeight;
      var realX = (clientX - left) * layerWidth / this.width;
      var realY = (clientY - top) * layerHeight / this.height;
      var x = this.x(realX);
      var y = this.y(realY);
      var closestPoints = [];
      var minDistance = sensitivity;
      (0, _forEach2["default"])(series, function (series, seriesIndex) {
        (0, _forEach2["default"])(series.data, function (point, pointIndex) {
          var distance;

          switch (props.distance) {
            case 'x':
              distance = Math.abs(point.x - x);
              break;

            case 'y':
              distance = Math.abs(point.y - y);
              break;

            default:
              distance = Math.sqrt(Math.pow(Math.abs(point.x - x) * (_this2.ratio || 1), 2) + Math.pow(Math.abs(point.y - y), 2));
              break;
          }

          if (!optimized || distance <= minDistance) {
            minDistance = distance;
            closestPoints.push({
              seriesIndex: seriesIndex,
              pointIndex: pointIndex,
              point: point,
              distance: distance
            });
          }
        });
      });
      closestPoints = (0, _sortBy2["default"])(closestPoints, 'distance');
      handler({
        clientX: realX,
        clientY: realY,
        scaleX: this.scaleX,
        scaleY: this.scaleY,
        x: x,
        y: y,
        closestPoints: closestPoints,
        originalEvent: event
      });
    }
  }, {
    key: "handleMouseMove",
    value: function handleMouseMove(event) {
      this.handleMouseEvent(event, this.props.onMouseMove);
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      this.handleMouseEvent(event, this.props.onClick);
    } // render

  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var props = this.props;
      var className = props.className,
          scaleX = props.scaleX,
          scaleY = props.scaleY,
          layerWidth = props.layerWidth,
          layerHeight = props.layerHeight;
      var onClick = props.onClick,
          onMouseMove = props.onMouseMove,
          onMouseLeave = props.onMouseLeave;
      this.updateScales();
      var children = (0, _proxyChildren["default"])(props.children, props, {
        layerWidth: layerWidth,
        layerHeight: layerHeight,
        scaleX: scaleX,
        scaleY: scaleY
      });
      return _react["default"].createElement("g", {
        className: className,
        onClick: onClick && this.handleClick,
        onMouseMove: onMouseMove && this.handleMouseMove,
        onMouseLeave: onMouseLeave
      }, _react["default"].createElement("rect", {
        ref: function ref(_ref) {
          return _this3.rect = _ref;
        },
        x: 0,
        y: 0,
        width: layerWidth,
        height: layerHeight,
        fill: 'transparent',
        stroke: 'transparent'
      }), children);
    }
  }]);

  return Handlers;
}(_react.Component);

exports["default"] = Handlers;
Handlers.displayName = 'Handlers';
Handlers.propTypes = {
  className: _propTypes["default"].string,
  series: _propTypes["default"].array,
  sensitivity: _propTypes["default"].number,
  optimized: _propTypes["default"].bool,
  distance: _propTypes["default"].oneOf(['x', 'y']),
  onClick: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].bool]),
  onMouseMove: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].bool]),
  onMouseLeave: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].bool]),
  scaleX: _propTypes["default"].object,
  scaleY: _propTypes["default"].object,
  layerWidth: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  layerHeight: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  children: _propTypes["default"].node
};
Handlers.defaultProps = {
  sensitivity: Infinity,
  optimized: true
};