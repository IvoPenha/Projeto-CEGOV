"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Lines;

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3Shape = require("d3-shape");

var _curves = _interopRequireDefault(require("./helpers/curves"));

var _value = _interopRequireDefault(require("./helpers/value"));

var _colorFunc = _interopRequireDefault(require("./helpers/colorFunc"));

var _propTypes2 = _interopRequireDefault(require("./helpers/propTypes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Renders lines for your line chart.
 *
 * @example ../docs/examples/Lines.md
 */
function Lines(props) {
  var className = props.className,
      style = props.style,
      scaleX = props.scaleX,
      scaleY = props.scaleY,
      minY = props.minY,
      asAreas = props.asAreas,
      colors = props.colors,
      series = props.series,
      opacity = props.opacity;
  var rotate = scaleX.swap || scaleY.swap;
  var x = scaleX.factory(props);
  var y = scaleY.factory(props);

  var _y0 = y(minY || 0);

  var color = (0, _colorFunc["default"])(colors);
  return _react["default"].createElement("g", {
    className: className,
    style: style,
    opacity: opacity
  }, (0, _map2["default"])(series, function (series, index) {
    var seriesVisible = props.seriesVisible,
        seriesStyle = props.seriesStyle,
        seriesAttributes = props.seriesAttributes;
    var lineVisible = props.lineVisible,
        lineStyle = props.lineStyle,
        lineAttributes = props.lineAttributes,
        lineWidth = props.lineWidth;
    seriesVisible = (0, _value["default"])(seriesVisible, {
      seriesIndex: index,
      series: series,
      props: props
    });

    if (!seriesVisible) {
      return;
    }

    seriesAttributes = (0, _value["default"])(seriesAttributes, {
      seriesIndex: index,
      series: series,
      props: props
    });
    seriesStyle = (0, _value["default"])(seriesStyle, {
      seriesIndex: index,
      series: series,
      props: props
    });
    var linePath;
    lineVisible = (0, _value["default"])(lineVisible, {
      seriesIndex: index,
      series: series,
      props: props
    });

    if (lineVisible) {
      var line;

      if (rotate) {
        line = asAreas ? (0, _d3Shape.area)().x0(function (point) {
          return point.y0 ? y(point.y0) : _y0;
        }).x1(function (point) {
          return y(point.y);
        }) : (0, _d3Shape.line)().x(function (point) {
          return y(point.y);
        });
        line.y(function (point) {
          return x(point.x);
        });
      } else {
        line = asAreas ? (0, _d3Shape.area)().y0(function (point) {
          return point.y0 ? y(point.y0) : _y0;
        }).y1(function (point) {
          return y(point.y);
        }) : (0, _d3Shape.line)().y(function (point) {
          return y(point.y);
        });
        line.x(function (point) {
          return x(point.x);
        });
      }

      var lineColor = series.color || color(index);
      var curve = (0, _isString2["default"])(props.interpolation) ? _curves["default"][props.interpolation] : props.interpolation;
      line.defined(function (point) {
        return (0, _isNumber2["default"])(point.y);
      }).curve(curve);
      lineAttributes = (0, _value["default"])(lineAttributes, {
        seriesIndex: index,
        series: series,
        props: props
      });
      lineStyle = (0, _value["default"])([series.style, lineStyle], {
        seriesIndex: index,
        series: series,
        props: props
      });
      lineWidth = (0, _value["default"])(lineWidth, {
        seriesIndex: index,
        series: series,
        props: props
      });
      linePath = _react["default"].createElement("path", _extends({
        style: lineStyle,
        fill: asAreas ? lineColor : 'transparent',
        stroke: asAreas ? 'transparent' : lineColor,
        strokeWidth: lineWidth,
        d: line(series.data)
      }, lineAttributes));
    }

    return _react["default"].createElement("g", _extends({
      key: index,
      className: className && className + '-series ' + className + '-series-' + index,
      style: seriesStyle,
      opacity: series.opacity
    }, seriesAttributes), linePath);
  }));
}

Lines.displayName = 'Lines';
Lines.propTypes = {
  className: _propTypes["default"].string,
  style: _propTypes["default"].object,
  colors: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['category10', 'category20', 'category20b', 'category20c', 'accent', 'dark2', 'paired', 'pastel1', 'pastel2', 'set1', 'set2', 'set3', 'tableau10']), _propTypes["default"].arrayOf(_propTypes["default"].string), _propTypes["default"].func]),
  opacity: _propTypes["default"].number,
  asAreas: _propTypes["default"].bool,
  interpolation: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'monotone']), _propTypes["default"].func]),
  seriesVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  seriesAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  seriesStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  lineVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  lineAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  lineStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  lineWidth: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string, _propTypes["default"].func]),
  scaleX: _propTypes["default"].object,
  scaleY: _propTypes["default"].object,
  minX: _propTypes["default"].number,
  maxX: _propTypes["default"].number,
  minY: _propTypes["default"].number,
  maxY: _propTypes["default"].number,
  seriesIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].array, _propTypes["default"].func]),
  series: _propTypes2["default"].series
};
Lines.defaultProps = {
  colors: 'category20',
  interpolation: 'monotone',
  seriesVisible: true,
  lineVisible: true,
  lineWidth: 3
};