"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _groupBy2 = _interopRequireDefault(require("lodash/groupBy"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _defaults2 = _interopRequireDefault(require("lodash/defaults"));

var _forEach2 = _interopRequireDefault(require("lodash/forEach"));

var _reduce2 = _interopRequireDefault(require("lodash/reduce"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3Scale = require("d3-scale");

var _d3Cloud = _interopRequireDefault(require("d3-cloud"));

var _colorFunc = _interopRequireDefault(require("./helpers/colorFunc"));

var _value = _interopRequireDefault(require("./helpers/value"));

var _propTypes2 = _interopRequireDefault(require("./helpers/propTypes"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Renders cloud of tags/keywords. Uses [d3-cloud](https://www.npmjs.com/package/d3-cloud) for calculations.
 * Please notice, `series` data points should have `label` attribute. See example below.
 *
 * @example ../docs/examples/Cloud.md
 */
var Cloud = /*#__PURE__*/function (_Component) {
  _inherits(Cloud, _Component);

  var _super = _createSuper(Cloud);

  function Cloud(props) {
    var _this;

    _classCallCheck(this, Cloud);

    _this = _super.call(this, props);
    _this.buildCloud = _this.buildCloud.bind(_assertThisInitialized(_this));
    _this.state = {
      labels: [],
      series: []
    };
    return _this;
  } // helpers


  _createClass(Cloud, [{
    key: "buildCloud",
    value: function buildCloud(props) {
      var _this2 = this;

      var layerWidth = props.layerWidth,
          layerHeight = props.layerHeight,
          series = props.series;
      var font = props.font,
          fontStyle = props.fontStyle,
          fontWeight = props.fontWeight,
          rotate = props.rotate,
          spiral = props.spiral,
          padding = props.padding,
          random = props.random;
      var scale = (0, _d3Scale.scaleLinear)().range([props.minFontSize, props.maxFontSize]).domain([props.minY, props.maxY]);
      var words = (0, _reduce2["default"])(series, function (words, _ref, seriesIndex) {
        var data = _ref.data;
        (0, _forEach2["default"])(data, function (point, pointIndex) {
          words.push((0, _defaults2["default"])({
            text: point.label,
            size: point.y,
            seriesIndex: seriesIndex,
            pointIndex: pointIndex
          }, point));
        });
        return words;
      }, []);
      var cl = (0, _d3Cloud["default"])().size([layerWidth, layerHeight]).words(words).font(font).fontStyle(fontStyle).fontWeight(fontWeight).rotate(rotate).spiral(spiral).padding(padding).random(random).timeInterval(15).fontSize(function (d) {
        return scale(d.size);
      });

      if (props.canvas) {
        cl.canvas(props.canvas);
      }

      cl.on('end', function (labels) {
        labels = (0, _map2["default"])((0, _groupBy2["default"])(labels, 'seriesIndex'), function (labels) {
          return (0, _sortBy2["default"])(labels, 'pointIndex');
        });

        _this2.setState({
          series: series,
          labels: labels
        });
      });
      cl.start();
    } // lifecycle

  }, {
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      this.buildCloud(this.props);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      this.buildCloud(nextProps);
    } // render

  }, {
    key: "render",
    value: function render() {
      var props = this.props,
          state = this.state;
      var className = props.className,
          style = props.style,
          layerWidth = props.layerWidth,
          layerHeight = props.layerHeight,
          opacity = props.opacity;
      var labels = state.labels;
      var color = (0, _colorFunc["default"])(props.colors);
      return _react["default"].createElement("g", {
        className: className,
        style: style,
        opacity: opacity,
        transform: 'translate(' + layerWidth / 2 + ',' + layerHeight / 2 + ')'
      }, (0, _map2["default"])(state.series, function (series, seriesIndex) {
        var seriesVisible = props.seriesVisible,
            seriesStyle = props.seriesStyle,
            seriesAttributes = props.seriesAttributes;
        seriesVisible = (0, _value["default"])(seriesVisible, {
          seriesIndex: seriesIndex,
          series: series,
          props: props
        });

        if (!seriesVisible) {
          return;
        }

        seriesAttributes = (0, _value["default"])(seriesAttributes, {
          seriesIndex: seriesIndex,
          series: series,
          props: props
        });
        seriesStyle = (0, _value["default"])(seriesStyle, {
          seriesIndex: seriesIndex,
          series: series,
          props: props
        });
        return _react["default"].createElement("g", _extends({
          key: seriesIndex,
          className: className && className + '-series ' + className + '-series-' + seriesIndex,
          style: seriesStyle,
          opacity: series.opacity
        }, seriesAttributes), (0, _map2["default"])(series.data, function (point, pointIndex) {
          var labelVisible = props.labelVisible,
              labelAttributes = props.labelAttributes,
              labelStyle = props.labelStyle;
          var label = labels[seriesIndex] && labels[seriesIndex][pointIndex];

          if (!label) {
            return;
          }

          labelVisible = (0, _value["default"])(labelVisible, {
            seriesIndex: seriesIndex,
            pointIndex: pointIndex,
            point: point,
            label: label,
            series: series,
            props: props
          });

          if (!labelVisible) {
            return;
          }

          labelAttributes = (0, _value["default"])(labelAttributes, {
            seriesIndex: seriesIndex,
            pointIndex: pointIndex,
            point: point,
            label: label,
            series: series,
            props: props
          });
          labelStyle = (0, _value["default"])([point.style, series.style, labelStyle], {
            seriesIndex: seriesIndex,
            pointIndex: pointIndex,
            point: point,
            label: label,
            series: series,
            props: props
          });
          return _react["default"].createElement("g", {
            key: pointIndex,
            className: className && className + '-label ' + className + '-label-' + +pointIndex,
            style: {
              fontSize: label.size + 'px',
              fontFamily: label.font
            }
          }, _react["default"].createElement("text", _extends({
            transform: 'translate(' + label.x + ',' + label.y + '),rotate(' + label.rotate + ')',
            fill: point.color || series.color || color(seriesIndex),
            fillOpacity: point.opacity,
            textAnchor: 'middle',
            style: labelStyle
          }, labelAttributes), label.text));
        }));
      }));
    }
  }]);

  return Cloud;
}(_react.Component);

exports["default"] = Cloud;
Cloud.displayName = 'Cloud';
Cloud.propTypes = {
  className: _propTypes["default"].string,
  colors: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['category10', 'category20', 'category20b', 'category20c', 'accent', 'dark2', 'paired', 'pastel1', 'pastel2', 'set1', 'set2', 'set3', 'tableau10']), _propTypes["default"].arrayOf(_propTypes["default"].string), _propTypes["default"].func]),
  opacity: _propTypes["default"].number,
  style: _propTypes["default"].object,
  font: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),
  minFontSize: _propTypes["default"].number,
  maxFontSize: _propTypes["default"].number,
  fontStyle: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['normal', 'italic', 'oblique', 'inherit']), _propTypes["default"].func]),
  fontWeight: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['normal', 'bold', 'bolder', 'lighter', 'normal', '100', '200', '300', '400', '500', '600', '700', '800', '900']), _propTypes["default"].func]),

  /**
   * Angle in degrees
   */
  rotate: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].func]),

  /**
   * Type of spiral used for positioning words. This can either be one of the two
   * built-in spirals, "archimedean" and "rectangular", or an arbitrary spiral
   * generator can be used, of the following form
   */
  spiral: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(['archimedean', 'rectangular']), _propTypes["default"].func]),
  padding: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].func]),
  random: _propTypes["default"].func,
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),
  labelFormat: _propTypes["default"].func,
  labelVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  labelAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  labelStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  seriesVisible: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
  seriesAttributes: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  seriesStyle: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  layerWidth: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  layerHeight: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  seriesIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].array, _propTypes["default"].func]),
  series: _propTypes2["default"].series,
  minX: _propTypes["default"].number,
  maxX: _propTypes["default"].number,
  minY: _propTypes["default"].number,
  maxY: _propTypes["default"].number,
  canvas: _propTypes["default"].object
};
Cloud.defaultProps = {
  colors: 'category20',
  seriesVisible: true,
  labelVisible: true,
  font: 'serif',
  minFontSize: 10,
  maxFontSize: 100,
  fontStyle: 'normal',
  fontWeight: 'normal',
  rotate: 0,
  spiral: 'archimedean',
  padding: 1,
  random: Math.random
};