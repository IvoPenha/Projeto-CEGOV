"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Chart;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _defaults2 = _interopRequireDefault(require("lodash/defaults"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3Scale = require("d3-scale");

var _proxyChildren = _interopRequireDefault(require("./helpers/proxyChildren"));

var _normalizeNumber = _interopRequireDefault(require("./helpers/normalizeNumber"));

var _propTypes2 = _interopRequireDefault(require("./helpers/propTypes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Every chart should start with `<Chart>` component. It serves to set sizes (`width` and `height`)
 * and to wrap all another components:
 * - [Graphics](#graphics)
 * - [Wrappers](#wrappers)
 * - [Helpers](#helpers)
 *
 * Also read more about [hidden props](#magic--hidden-props).
 *
 * @example ../docs/examples/Chart.md
 */
function Chart(props) {
  var viewBox = props.viewBox;
  var width = props.width,
      height = props.height,
      layerWidth = props.layerWidth,
      layerHeight = props.layerHeight;
  width = width || layerWidth;
  height = height || layerHeight;

  if (viewBox) {
    var viewBoxTotal = (0, _map2["default"])(viewBox.split(' '), function (value) {
      return parseInt(value);
    });
    width = width || viewBoxTotal[2];
    height = height || viewBoxTotal[3];
  }

  var children = (0, _proxyChildren["default"])(props.children, props, {
    layerWidth: width,
    layerHeight: height,
    scaleX: (0, _defaults2["default"])({}, props.scaleX, {
      direction: 1,
      paddingStart: 0.5,
      paddingEnd: 0.5,
      paddingLeft: 0,
      paddingRight: 0,
      factory: function factory(props) {
        var _props$scaleX = props.scaleX,
            paddingStart = _props$scaleX.paddingStart,
            paddingEnd = _props$scaleX.paddingEnd,
            paddingLeft = _props$scaleX.paddingLeft,
            paddingRight = _props$scaleX.paddingRight,
            direction = _props$scaleX.direction,
            swap = _props$scaleX.swap;
        var layerWidth = props.layerWidth,
            layerHeight = props.layerHeight;

        if (swap) {
          layerWidth = layerHeight;
        }

        var minX = props.minX - paddingStart;
        var maxX = props.maxX + paddingEnd;
        return (0, _d3Scale.scaleLinear)().range([(0, _normalizeNumber["default"])(paddingLeft, layerWidth), layerWidth - (0, _normalizeNumber["default"])(paddingRight, layerWidth)]).domain(direction >= 0 ? [minX, maxX] : [maxX, minX]);
      }
    }),
    scaleY: (0, _defaults2["default"])({}, props.scaleY, {
      direction: 1,
      paddingStart: 0,
      paddingEnd: 0,
      paddingTop: 0,
      paddingBottom: 0,
      factory: function factory(props) {
        var _props$scaleY = props.scaleY,
            paddingStart = _props$scaleY.paddingStart,
            paddingEnd = _props$scaleY.paddingEnd,
            paddingBottom = _props$scaleY.paddingBottom,
            paddingTop = _props$scaleY.paddingTop,
            direction = _props$scaleY.direction,
            swap = _props$scaleY.swap;
        var layerWidth = props.layerWidth,
            layerHeight = props.layerHeight;

        if (swap) {
          layerHeight = layerWidth;
        }

        var minY = props.minY - paddingStart;
        var maxY = props.maxY + paddingEnd;
        return (0, _d3Scale.scaleLinear)().range([layerHeight - (0, _normalizeNumber["default"])(paddingBottom, layerHeight), (0, _normalizeNumber["default"])(paddingTop, layerHeight)]).domain(direction >= 0 ? [minY, maxY] : [maxY, minY]);
      }
    })
  });
  var Tag = props.tag;
  return _react["default"].createElement(Tag, _extends({}, (0, _omit2["default"])(props, ['series', 'tag', 'children', 'minX', 'maxX', 'minY', 'maxY', 'scaleX', 'scaleY', 'layerWidth', 'layerHeight']), {
    viewBox: viewBox || "0 0 ".concat(width, " ").concat(height)
  }), children);
}

Chart.displayName = 'Chart';
Chart.propTypes = {
  /**
   * Chart width (pixels)
   */
  width: _propTypes["default"].number,

  /**
   * Chart height (pixels)
   */
  height: _propTypes["default"].number,

  /**
   * Chart SVG viewBox.
   * Using that property user can make the chart responsive using CSS
   * Example: svg { width: 100%; height: auto; }
   */
  viewBox: _propTypes["default"].string,

  /**
   * Layer width (pixels). Useful when you want to make a responsive chart using viewBox prop, but
   * don't want to specify width of svg tag.
   */
  layerWidth: _propTypes["default"].number,

  /**
   * Layer height (pixels). Useful when you want to make a responsive chart using viewBox prop, but
   * don't want to specify height of svg tag.
   */
  layerHeight: _propTypes["default"].number,

  /**
   * An array of series objects. Read more [about series](#series). (or docs/series.md)
   */
  series: _propTypes2["default"].series,

  /**
   * It can be change to `"g"`, if you want to include your chart inside another svg graphic.
   */
  tag: _propTypes["default"].string,

  /**
   * Rumble-charts components (one or more) or any other valid svg tag
   * (i.e. `<defs>`, `<g>`, `<rect>`, `<circle>` etc)
   */
  children: _propTypes["default"].node,

  /**
   * Optional limit, affects on how graphics will be drawn. It's calculated automatically based on
   * `series` you've supplied, but sometimes you will need to define it by yourself.
   * Especially it relates to `minY` property. Very often you have to set it as `minY={0}`.
   */
  minX: _propTypes["default"].number,

  /**
   * See above
   */
  maxX: _propTypes["default"].number,

  /**
   * See above
   */
  minY: _propTypes["default"].number,

  /**
   * See above
   */
  maxY: _propTypes["default"].number,

  /**
   * X-scale (horizontal) attributes. For better understanding see examples below.
   */
  scaleX: _propTypes["default"].shape({
    /**
     * 1 or -1, default value is 1
     */
    direction: _propTypes["default"].number,

    /**
     * Padding at the start of the scale domain, default value is 0.5
     */
    paddingStart: _propTypes["default"].number,

    /**
     * Padding at the end of the scale domain, default value is 0.5
     */
    paddingEnd: _propTypes["default"].number,

    /**
     * Left padding in pixels, default value is 0
     */
    paddingLeft: _propTypes["default"].number,

    /**
     * Right padding in pixels, default value is 0
     */
    paddingRight: _propTypes["default"].number,
    factory: _propTypes["default"].func,
    swap: _propTypes["default"]["boolean"]
  }),

  /**
   * Y-scale (vertical) attributes. For better understanding see examples below.
   */
  scaleY: _propTypes["default"].shape({
    /**
     * 1 or -1, default value is 1
     */
    direction: _propTypes["default"].number,

    /**
     * Padding at the start of the scale domain, default value is 0
     */
    paddingStart: _propTypes["default"].number,

    /**
     * Padding at the end of the scale domain, default value is 0
     */
    paddingEnd: _propTypes["default"].number,

    /**
     * Top padding in pixels, default value is 0
     */
    paddingTop: _propTypes["default"].number,

    /**
     * Bottom padding in pixels, default value is 0
     */
    paddingBottom: _propTypes["default"].number,
    factory: _propTypes["default"].func,
    swap: _propTypes["default"]["boolean"]
  })
};
Chart.defaultProps = {
  series: [],
  tag: 'svg'
};